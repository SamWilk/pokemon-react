name: Continuous Integration

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  echothings:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Hello there from $DB"

  confirm-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v1
        with:
          node-version: 18
      - run: |
          npm ci
          npm run build

  build-docker-image-ui:
    runs-on: ubuntu-latest
    needs: confirm-build

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: $DOCKERHUB_USERNAME
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: $DOCKERHUB_USERNAME/pokemon-react-ui:latest

  build-docker-image-server:
    runs-on: ubuntu-latest
    needs: confirm-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Creating .env file
        run: |
          echo "${{ secrets.PROD_ENV }}" >> ./api/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: $DOCKERHUB_USERNAME
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: $DOCKERHUB_USERNAME/pokemon-react-server:latest
          context: ./api

  sync-db:
    runs-on: ubuntu-latest
    needs: [build-docker-image-server, build-docker-image-ui]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install psql client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create .env file with secrets
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env.production
          echo "PORT=$PORT" >> .env.production
          echo "DB=$DB" >> .env.production
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env.production
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
          echo "NODE_ENV=production" >> .env.production

      - name: Execute shell script to run SQL files
        run: |
          chmod +x ./run-db-scripts.sh
          ./run-db-scripts.sh -s ${{ secrets.DB_HOST }} -d $DB -n .production

      - name: Clean up PostgreSQL
        run: |
          sudo systemctl stop postgresql

  deploy-k8s-prod:
    runs-on: ubuntu-latest
    needs: [sync-db]
    steps:
      - name: Configure kubectl
        uses: Azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy k8s yaml
        id: deploy-k8s-yaml
        run: |
          kubectl -n pokemon-react rollout restart deployment
